imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: oauth.yml }
    - { resource: services.yml }
    - { resource: message_bus/order.yml }
    - { resource: message_bus/task.yml }
    - { resource: doctrine_extensions.yml }
    - { resource: state_machine.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: "%coopcycle.locale%"
    locale_regex: ca|fr|en|es|de
    router.request_context.host: '%host%'

framework:
    #esi:             ~
    translator:      { fallbacks: ["en"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id:  session.handler.native_file
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
        cookie_lifetime: 604800 # 7 days
        gc_maxlifetime: 604800 # 7 days
    fragments:       ~
    http_method_override: true
    assets: ~
    cache:
        pools:
            enabled_filter_configurator.cache:
                adapter: cache.adapter.filesystem

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    form_themes:
        - 'VichUploaderBundle:Form:fields.html.twig'
    globals:
        is_demo: "%is_demo%"
        sentry_public_dsn: "%sentry_public_dsn%"
        country_iso: "%country_iso%"
        cart_provider: '@AppBundle\Service\CartProviderService'
        settings_manager: "@coopcycle.settings_manager"
        piwik_site_id: "%piwik_site_id%"
        piwik_disabled: "%kernel.debug%"
        currency_context: "@sylius.context.currency"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
            geography:
                class: 'Jsor\Doctrine\PostGIS\Types\GeographyType'
                commented: false
            geometry:
                class: 'Jsor\Doctrine\PostGIS\Types\GeometryType'
                commented: false
            raster:
                class: 'Jsor\Doctrine\PostGIS\Types\RasterType'
                commented: false
            geojson:
                class: 'AppBundle\Doctrine\DBAL\Types\GeoJSONType'
                commented: true
            uuid:  Ramsey\Uuid\Doctrine\UuidType
            phone_number: Misd\PhoneNumberBundle\Doctrine\DBAL\Types\PhoneNumberType
            date_string: AppBundle\Doctrine\DBAL\Types\DateStringType
        mapping_types:
            _text: string

        # If you don't define this option and you haven't created your database yet,
        # you may get PDOException errors because Doctrine will try to guess
        # the database server version automatically and none is available.
        # http://symfony.com/doc/current/reference/configuration/doctrine.html
        # Should be fixed in next Doctrine version
        # https://github.com/doctrine/dbal/pull/2671
        server_version: 9.4

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        mappings:
            AppBundle:
                type: yml
        dql:
            string_functions:
                ST_DWithin: Jsor\Doctrine\PostGIS\Functions\ST_DWithin
                ST_GeomFromText: Jsor\Doctrine\PostGIS\Functions\ST_GeomFromText
                ST_Distance: Jsor\Doctrine\PostGIS\Functions\ST_Distance
                ST_GeomFromGeoJSON: Jsor\Doctrine\PostGIS\Functions\ST_GeomFromGeoJSON
                ST_AsText: Jsor\Doctrine\PostGIS\Functions\ST_AsText
                similarity: AppBundle\Doctrine\Functions\Similarity
                TSRANGE: AppBundle\Doctrine\Functions\TsRange
                OVERLAPS: MartinGeorgiev\Doctrine\ORM\Query\AST\Functions\Overlaps
                CAST: DoctrineExtensions\Query\Mysql\Cast
            datetime_functions:
                date: DoctrineExtensions\Query\Mysql\Date
        filters:
            soft_deleteable:
                class:   Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
                enabled: false
            enabled_filter:
                class:   AppBundle\Doctrine\Filter\EnabledFilter
                enabled: true
        resolve_target_entities:
            Sylius\Component\Order\Model\OrderInterface: AppBundle\Sylius\Order\OrderInterface

api_platform:
    mapping:
        paths:
            - '%kernel.project_dir%/src/AppBundle/Api/Dto'
            - '%kernel.project_dir%/src/AppBundle/Api/Resource'
    exception_to_status:
        Symfony\Component\Serializer\Exception\ExceptionInterface: 400
        ApiPlatform\Core\Exception\InvalidArgumentException: 400
        ApiPlatform\Core\Validator\Exception\ValidationException: 400
        AppBundle\Api\Exception\BadRequestHttpException: 400
    # see https://github.com/api-platform/core/pull/2721
    messenger:
        enabled: false

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    port:      "%mailer_port%"
    encryption: "%mailer_encryption%"
    spool:     { type: memory }

# Nelmio CORS
nelmio_cors:
    defaults:
        allow_origin:   ["%cors_allow_origin%"]
        allow_methods:  ["POST", "PUT", "GET", "DELETE", "OPTIONS"]
        allow_headers:  ["content-type", "authorization"]
        expose_headers: ["link"]
        max_age:        3600
    paths:
        '^/api/':
            allow_origin: ['*']

fos_user:
    db_driver: orm
    firewall_name: web
    user_class: AppBundle\Entity\ApiUser
    service:
        mailer: fos_user.mailer.twig_swift
        user_manager: coopcycle.user_manager
    from_email:
        address:        "%transactional_address%"
        sender_name:    "%transactional_sender_name%"
    registration:
        form:
            type: AppBundle\Form\RegistrationType

lexik_jwt_authentication:
    secret_key:  "%jwt_private_key_path%"
    public_key:  "%jwt_public_key_path%"
    pass_phrase: "%jwt_key_pass_phrase%"
    token_ttl:   "%jwt_token_ttl%"
    token_extractors:
        authorization_header:      # look for a token as Authorization Header
            enabled: true
            prefix:  Bearer
            name:    Authorization
        query_parameter:           # check token in query string parameter
            enabled: true
            name:    token

gesdinet_jwt_refresh_token:
    user_provider: fos_user.user_provider.username_email

snc_redis:
    clients:
        default:
            type: predis
            alias: default
            dsn: "%redis_dsn%"
            options:
                prefix: "%database_name%:"
                # https://github.com/nrk/predis/issues/33
                read_write_timeout: 0

vich_uploader:
    db_driver: orm
    mappings:
        restaurant_image:
            uri_prefix: /images/restaurants
            upload_destination: '%kernel.root_dir%/../web/images/restaurants'
            namer: vich_uploader.namer_uniqid
            directory_namer:
                service: vich_uploader.directory_namer_subdir
                options:
                    chars_per_dir: 2
                    dirs: 2
        store_image:
            uri_prefix: /images/stores
            upload_destination: '%kernel.root_dir%/../web/images/stores'
            namer: vich_uploader.namer_uniqid
            directory_namer:
                service: vich_uploader.directory_namer_subdir
                options:
                    chars_per_dir: 2
                    dirs: 2
        task_image:
            uri_prefix: /images/tasks
            upload_destination: '%kernel.project_dir%/web/images/tasks'
            namer: vich_uploader.namer_uniqid
            directory_namer:
                service: vich_uploader.directory_namer_subdir
                options:
                    chars_per_dir: 2
                    dirs: 2
        product_image:
            uri_prefix: /images/products
            upload_destination: '%kernel.project_dir%/web/images/products'
            namer: vich_uploader.namer_uniqid
            directory_namer:
                service: vich_uploader.directory_namer_subdir
                options:
                    chars_per_dir: 2
                    dirs: 2

csa_guzzle:
    logger: true
    clients:
        osrm:
            config:
                base_uri: "http://%osrm_host%"
                lazy: true
        google_maps:
            config:
                base_uri: "https://maps.googleapis.com"
                lazy: true
        fcm:
            config:
                base_uri: "https://fcm.googleapis.com"
                lazy: true
        browserless:
            config:
                base_uri: "%browserless_base_uri%"
                lazy: true
        mjml_server:
            config:
                base_uri: "%mjml_server_base_uri%"
                lazy: true
        api:
            config:
                base_uri: "%router.request_context.scheme%://%router.request_context.host%"
                lazy: true

sylius_taxation:
    driver: doctrine/orm

sylius_order:
    resources:
        order:
            classes:
                model: AppBundle\Entity\Sylius\Order
                repository: AppBundle\Entity\Sylius\OrderRepository
        order_item:
            classes:
                model: AppBundle\Entity\Sylius\OrderItem
                repository: AppBundle\Entity\Sylius\OrderItemRepository

sylius_product:
    resources:
        product:
            classes:
                model: AppBundle\Entity\Sylius\Product
                repository: AppBundle\Entity\Sylius\ProductRepository
        product_variant:
            classes:
                model: AppBundle\Entity\Sylius\ProductVariant
        product_option:
            classes:
                model: AppBundle\Entity\Sylius\ProductOption
        product_option_value:
            classes:
                model: AppBundle\Entity\Sylius\ProductOptionValue

sylius_taxonomy:
    resources:
        taxon:
            classes:
                model: AppBundle\Entity\Sylius\Taxon
                repository: AppBundle\Entity\Sylius\TaxonRepository
                # interface: Sylius\Component\Taxonomy\Model\TaxonInterface

sylius_locale:
    locale: "%locale%"

sylius_currency:
    driver: doctrine/orm

sylius_promotion:
    resources:
        promotion_subject:
            classes:
                model: AppBundle\Entity\Sylius\Order
        promotion_coupon:
            classes:
                model: AppBundle\Entity\Sylius\PromotionCoupon

m6_statsd:
    servers:
        default:
            address: 'udp://%statsd_host%'
            port: "%statsd_port%"
    console_events: true
    base_collectors: true
    clients:
        default:
            servers: ["default"]
            events:
              statsd.memory_usage:
                gauge: "website.memory"
              statsd.time:
                timing: "website.time"
              statsd.exception:
                increment: "website.exception.<value>"

              # symfony build-in events https://symfony.com/doc/current/reference/events.html
              kernel.terminate: # this event is a symfony basic, you just have to listen to it to have the number of page view
                increment: website.response.<response.statusCode>

              lexik_jwt_authentication.on_authentication_success:
                increment : user.on_authentication_success

              user.resetting.send_email.requested:
                increment : user.resetting.send_email.requested
              user.resetting.send_email.done:
                increment: user.resetting.send_email.done
              user.resetting.send_email.user_does_not_exist:
                increment: user.resetting.send_email.user_does_not_exist
              user.resetting.send_email.request_not_expired:
                increment: user.resetting.send_email.request_not_expired

              user.resetting.set_password.requested:
                increment: user.resetting.set_password.requested
              user.resetting.set_password.done:
                increment: user.resetting.set_password.done
              user.resetting.set_password.token_not_found:
                increment: user.resetting.set_password.token_not_found
              user.resetting.set_password.token_expired:
                increment: user.resetting.set_password.token_expired
              user.resetting.set_password.password_not_valid:
                increment: user.resetting.set_password.password_not_valid

knp_paginator:
    template:
        pagination: '@KnpPaginator/Pagination/twitter_bootstrap_v3_pagination.html.twig'

sonata_seo:
    encoding: UTF-8
    page:
        title: CoopCycle
        metas:
            name:
                robots: index, follow
            http-equiv:
                'Content-Type': text/html; charset=utf-8
            charset:
                UTF-8: ''

command_bus:
    middlewares:
        logger: true

event_bus:
    event_name_resolver_strategy: named_message
    logging: ~

nelmio_alice:
    locale: 'fr_FR'

fos_js_routing:
    routes_to_expose:
        - ^restaurant$
        - ^restaurants$
        - restaurant_remove_from_cart
        - restaurant_cart_address
        - restaurant_cart_clear_time
        - restaurant_modify_cart_item_quantity
        - admin_dashboard_fullscreen
        - admin_foodtech_dashboard
        - admin_foodtech_settings
        - admin_order_accept
        - admin_order_refuse
        - admin_order_cancel
        - admin_order_delay
        - admin_restaurant_dashboard
        - admin_restaurant_stats
        - admin_tags
        - admin_task_image_download
        - admin_task_list_create
        - admin_task_list_modify
        - profile_jwt
        - profile_notifications
        - profile_notifications_unread
        - profile_notifications_mark_as_read
        - profile_order_accept
        - profile_order_refuse
        - profile_order_cancel
        - profile_order_delay
        - profile_restaurant_dashboard
        - profile_restaurant_stats
        - routing_route
        - user_avatar

webpack_encore:
    output_path: '%kernel.project_dir%/web'

liip_imagine:
    resolvers:
        default:
            web_path:
                web_root: '%kernel.project_dir%/web'
    filter_sets:
        cache: ~
        restaurant_thumbnail:
            filters:
                upscale:
                    min: [ 512, 512 ]
                thumbnail:
                    size: [ 512, 512 ]
                    mode: outbound
                    allow_upscale: true
            post_processors:
                jpegoptim:
                    strip_all: true
                    max: 80
                    progressive: true
                optipng:
                    strip_all: true
                    level: 4
        task_image_thumbnail:
            filters:
                thumbnail:
                    size: [ 128, 128 ]
                    mode: outbound
            post_processors:
                jpegoptim:
                    strip_all: true
                    max: 80
                    progressive: true
        product_thumbnail:
            filters:
                upscale:
                    min: [ 256, 256 ]
                thumbnail:
                    size: [ 256, 256 ]
                    mode: outbound
                    allow_upscale: true
            post_processors:
                jpegoptim:
                    strip_all: true
                    max: 80
                    progressive: true
                optipng:
                    strip_all: true
                    level: 4
    loaders:
        default:
            filesystem:
                data_root: '%kernel.project_dir%/web'
        restaurant_thumbnail:
            filesystem:
                data_root: '%kernel.project_dir%/web/images/restaurants'
        product_thumbnail:
            filesystem:
                data_root: '%kernel.project_dir%/web/images/products'

oneup_uploader:
    mappings:
        restaurant:
            frontend: dropzone
            storage:
                directory: '%kernel.root_dir%/../web/images/restaurants'
            allowed_mimetypes:
                image/jpg: []
                image/jpeg: []
                image/png: []
        product:
            frontend: dropzone
            storage:
                directory: '%kernel.root_dir%/../web/images/products'
            allowed_mimetypes:
                image/jpg: []
                image/jpeg: []
                image/png: []

trikoder_oauth2:
    authorization_server:
        private_key: "%jwt_private_key_path%"
        private_key_passphrase: "%jwt_key_pass_phrase%"
        encryption_key: "%trikoder_encryption_key%"
        access_token_ttl: PT1H
        refresh_token_ttl: P1M
    resource_server:
        public_key: "%jwt_public_key_path%"
    scopes:
        - tasks
        - deliveries
    persistence:
        doctrine:
            entity_manager: default

mjml:
    renderer: 'service'
    options:
        service_id: 'AppBundle\Mjml\MjmlServerRenderer'
